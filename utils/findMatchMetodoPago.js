const getMetodosPago = require("./getMetodosPago");
const fuzz = require('fuzzball');

const matchMetodoPago = async (inputMetodoPago) => {
  try {
    console.log(`üîç Buscando coincidencia para m√©todo de pago: "${inputMetodoPago}"`);
    
    if (!inputMetodoPago || inputMetodoPago.trim() === '') {
      console.log("‚ö†Ô∏è Input de m√©todo de pago vac√≠o");
      return { name: null, score: 0 };
    }

    // Obtener todos los m√©todos de pago de la base de datos
    const metodosPago = await getMetodosPago();
    
    if (metodosPago.length === 0) {
      console.log("‚ö†Ô∏è No hay m√©todos de pago en la base de datos");
      return { name: null, score: 0 };
    }

    let bestMatch = { name: null, score: 0 };
    const UMBRAL_MINIMO = 70; // Umbral m√≠nimo para considerar una coincidencia v√°lida

    // Comparar con cada m√©todo de pago usando fuzzball
    for (const metodoPago of metodosPago) {
      const score = fuzz.ratio(inputMetodoPago.toLowerCase(), metodoPago.name.toLowerCase());
      
      console.log(`  üîç "${metodoPago.name}" ‚Üí Score: ${score}%`);
      
      if (score > bestMatch.score) {
        bestMatch = {
          name: metodoPago.name,
          id: metodoPago.id,
          score: score
        };
      }
    }

    console.log(`üéØ Mejor coincidencia: "${bestMatch.name}" con ${bestMatch.score}% de similitud`);

    // Solo devolver el match si supera el umbral
    if (bestMatch.score >= UMBRAL_MINIMO) {
      console.log(`‚úÖ Coincidencia v√°lida encontrada: ${bestMatch.name} (${bestMatch.score}%)`);
      return bestMatch;
    } else {
      console.log(`‚ùå No se encontr√≥ coincidencia v√°lida. Mejor score: ${bestMatch.score}% (m√≠nimo: ${UMBRAL_MINIMO}%)`);
      return { name: null, score: bestMatch.score };
    }

  } catch (error) {
    console.error('‚ùå Error en matchMetodoPago:', error.message);
    return { name: null, score: 0 };
  }
};

module.exports = matchMetodoPago;